Use Configure Server to read properties from external repo:

1. Create folder (config-repo) out of current project and init git inside:
    git init .
    git remote add origin <path to new git repo>
2. Create project/module server-config.
    see server-config for more details
    application.prop change to bootstrap.prop
    bootstrap.properties: add this:
        server.port=8888
        spring.cloud.config.server.git.uri=file://${user.home}/<path to config-repo>
3. Alter existing service:
    Change app.prop to bootstrap.
    Add:
        spring.application.name=<service-name>
        spring.cloud.config.uri=http://localhost:8888
    Move prop to config-repo (to <service-name>.properties)
4. Run servcer-config and after that this service. Go to http://localhost:8888/<service-name>/default to see properties
------------------------------------------------------------------------------------------------------------------------

Refreshing properties:

If prop was changed, do not rerun config-server or service.
Call from terminal!!! curl -d {} http://<service-host-port>/refresh
If many instances of this service are running: curl -d {} http://<service-host-port>/bus/refresh
It will refresh properties
------------------------------------------------------------------------------------------------------------------------

Integration with Eureka

1. In Application add @EnableDiscoveryClient
2. Add dependency:
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-eureka</artifactId>
        </dependency>
3. In Config repo:
    for each service add: eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
4. Create EurekaService:
    Add eureka server, actuator, cloud config dependencies
    In bootstrap.prop:
        spring.application.name=eureka-server-1
        server.port=8761
        spring.cloud.config.uri=http://localhost:8888
    In App: add @EnableEurekaServer
------------------------------------------------------------------------------------------------------------------------

Create api gateway

1. Create new property files per service, and check in to the Git repositories.
2. Change application.properties to bootstrap.properties, and add the required configurations.
3. Add @EnableZuulProxy to Application.java in each of the *-apigateway projects.
4. Add @EnableDiscoveryClient in all the Application.java files under each of the *-apigateway projects.
5. Optionally, change the package names and file names generated by default.
------------------------------------------------------------------------------------------------------------------------

Logging
1. Download Elasticksearch, Kibana, Logstash
2. Add dependency to microservice:
        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
            <version>4.6</version>
        </dependency>
3. Downgrade logback
        <logback.version>1.1.6</logback.version>
4. Override logback.xml
5. Create logstash.conf
6. Run logstash, elasticksearch, kibana

./bin/logstash -f logstash.conf
./bin/elasticsearch
./bin/kibana

7. Go to localhost:5601
------------------------------------------------------------------------------------------------------------------------
